From 90c38a314d4aa28f9ae7e463675819f1e50c4b11 Mon Sep 17 00:00:00 2001
From: Cosmin Tanislav <demonsingur@gmail.com>
Date: Sat, 14 Jan 2023 01:54:20 +0200
Subject: [PATCH] input: touchscreen: touchscreen_mmi: move sleep to queue

Change-Id: I47edcda99a91d3c58003db64a616fb75be3308d2
Signed-off-by: Sevenrock <sevenrock@hotmail.de>
---
 .../touchscreen_mmi/touchscreen_mmi_notif.c   | 107 +++++++++++++-----
 include/linux/touchscreen_mmi.h               |   3 +
 2 files changed, 82 insertions(+), 28 deletions(-)

diff --git a/drivers/input/touchscreen/touchscreen_mmi/touchscreen_mmi_notif.c b/drivers/input/touchscreen/touchscreen_mmi/touchscreen_mmi_notif.c
index 216608e2e5db..3c7c048e779a 100644
--- a/drivers/input/touchscreen/touchscreen_mmi/touchscreen_mmi_notif.c
+++ b/drivers/input/touchscreen/touchscreen_mmi/touchscreen_mmi_notif.c
@@ -41,7 +41,7 @@ extern struct blocking_notifier_head dsi_freq_head;
 					touch_cdev->mdata->power && \
 					IS_DEEPSLEEP_MODE)
 
-static int ts_mmi_panel_off(struct ts_mmi_dev *touch_cdev) {
+static int ts_mmi_queued_stop(struct ts_mmi_dev *touch_cdev) {
 	int ret = 0;
 
 	if (atomic_cmpxchg(&touch_cdev->touch_stopped, 0, 1) == 1)
@@ -98,11 +98,40 @@ static int ts_mmi_panel_off(struct ts_mmi_dev *touch_cdev) {
 #endif
 	TRY_TO_CALL(post_suspend);
 
+	if (NEED_TO_SET_PINCTRL) {
+		dev_dbg(DEV_MMI, "%s: touch pinctrl off\n", __func__);
+		TRY_TO_CALL(pinctrl, TS_MMI_PINCTL_OFF);
+	}
+
 	dev_info(DEV_MMI, "%s: done\n", __func__);
 
 	return 0;
 }
 
+static int ts_mmi_panel_off(struct ts_mmi_dev *touch_cdev)
+{
+	kfifo_put(&touch_cdev->cmd_pipe, TS_MMI_DO_SLEEP);
+	/* schedule_delayed_work returns true if work has been scheduled */
+	/* and false otherwise, thus return 0 on success to comply POSIX */
+	return schedule_delayed_work(&touch_cdev->work, 0) == false;
+}
+
+static int ts_mmi_power_off(struct ts_mmi_dev *touch_cdev)
+{
+	kfifo_put(&touch_cdev->cmd_pipe, TS_MMI_DO_POWER_OFF);
+	/* schedule_delayed_work returns true if work has been scheduled */
+	/* and false otherwise, thus return 0 on success to comply POSIX */
+	return schedule_delayed_work(&touch_cdev->work, 0) == false;
+}
+
+static int ts_mmi_power_on(struct ts_mmi_dev *touch_cdev)
+{
+	kfifo_put(&touch_cdev->cmd_pipe, TS_MMI_DO_POWER_ON);
+	/* schedule_delayed_work returns true if work has been scheduled */
+	/* and false otherwise, thus return 0 on success to comply POSIX */
+	return schedule_delayed_work(&touch_cdev->work, 0) == false;
+}
+
 static int inline ts_mmi_panel_on(struct ts_mmi_dev *touch_cdev) {
 	atomic_set(&touch_cdev->resume_should_stop, 0);
 	kfifo_put(&touch_cdev->cmd_pipe, TS_MMI_DO_RESUME);
@@ -119,43 +148,18 @@ static int ts_mmi_panel_event_handle(struct ts_mmi_dev *touch_cdev, enum ts_mmi_
 	/* for in-cell design touch solutions */
 	switch (event) {
 	case TS_MMI_EVENT_PRE_DISPLAY_OFF:
-		cancel_delayed_work_sync(&touch_cdev->work);
 		ts_mmi_panel_off(touch_cdev);
-		if (NEED_TO_SET_PINCTRL) {
-			dev_dbg(DEV_MMI, "%s: touch pinctrl off\n", __func__);
-			TRY_TO_CALL(pinctrl, TS_MMI_PINCTL_OFF);
-		}
 		break;
 
 	case TS_MMI_EVENT_DISPLAY_OFF:
-		if (NEED_TO_SET_POWER) {
-			/* then proceed with de-powering */
-			TRY_TO_CALL(power, TS_MMI_POWER_OFF);
-			dev_dbg(DEV_MMI, "%s: touch powered off\n", __func__);
-		}
+		ts_mmi_power_off(touch_cdev);
 		break;
 
 	case TS_MMI_EVENT_PRE_DISPLAY_ON:
-		if (NEED_TO_SET_POWER) {
-			/* powering on early */
-			TRY_TO_CALL(power, TS_MMI_POWER_ON);
-			dev_dbg(DEV_MMI, "%s: touch powered on\n", __func__);
-		} else if (touch_cdev->pdata.reset &&
-			touch_cdev->mdata->reset) {
-			/* Power is not off in previous suspend.
-			 * But need reset IC in resume.
-			 */
-			dev_dbg(DEV_MMI, "%s: resetting...\n", __func__);
-			TRY_TO_CALL(reset, TS_MMI_RESET_HARD);
-		}
+		ts_mmi_power_on(touch_cdev);
 		break;
 
 	case TS_MMI_EVENT_DISPLAY_ON:
-		/* out of reset to allow wait for boot complete */
-		if (NEED_TO_SET_PINCTRL) {
-			TRY_TO_CALL(pinctrl, TS_MMI_PINCTL_ON);
-			dev_dbg(DEV_MMI, "%s: touch pinctrl_on\n", __func__);
-		}
 		ts_mmi_panel_on(touch_cdev);
 		break;
 
@@ -258,6 +262,35 @@ static inline void ts_mmi_restore_settings(struct ts_mmi_dev *touch_cdev)
 	dev_dbg(DEV_MMI, "%s: done\n", __func__);
 }
 
+static void ts_mmi_queued_power_on(struct ts_mmi_dev *touch_cdev)
+{
+	int ret = 0;
+
+	if (NEED_TO_SET_POWER) {
+		/* powering on early */
+		TRY_TO_CALL(power, TS_MMI_POWER_ON);
+		dev_dbg(DEV_MMI, "%s: touch powered on\n", __func__);
+	} else if (touch_cdev->pdata.reset &&
+		touch_cdev->mdata->reset) {
+		/* Power is not off in previous suspend.
+		 * But need reset IC in resume.
+		 */
+		dev_dbg(DEV_MMI, "%s: resetting...\n", __func__);
+		TRY_TO_CALL(reset, TS_MMI_RESET_HARD);
+	}
+}
+
+static void ts_mmi_queued_power_off(struct ts_mmi_dev *touch_cdev)
+{
+	int ret = 0;
+
+	if (NEED_TO_SET_POWER) {
+		/* then proceed with de-powering */
+		TRY_TO_CALL(power, TS_MMI_POWER_OFF);
+		dev_dbg(DEV_MMI, "%s: touch powered off\n", __func__);
+	}
+}
+
 static void ts_mmi_queued_resume(struct ts_mmi_dev *touch_cdev)
 {
 	bool wait4_boot_complete = true;
@@ -266,6 +299,12 @@ static void ts_mmi_queued_resume(struct ts_mmi_dev *touch_cdev)
 	if (atomic_cmpxchg(&touch_cdev->touch_stopped, 1, 0) == 0)
 		return;
 
+	/* out of reset to allow wait for boot complete */
+	if (NEED_TO_SET_PINCTRL) {
+		TRY_TO_CALL(pinctrl, TS_MMI_PINCTL_ON);
+		dev_dbg(DEV_MMI, "%s: touch pinctrl_on\n", __func__);
+	}
+
 #ifdef TS_MMI_TOUCH_MULTIWAY_UPDATE_FW
 	if (touch_cdev->flash_mode == FW_PARAM_MODE &&\
 			touch_cdev->pdata.fw_load_resume) {
@@ -344,6 +383,10 @@ static void ts_mmi_worker_func(struct work_struct *w)
 
 	while (kfifo_get(&touch_cdev->cmd_pipe, &cmd)) {
 		switch (cmd) {
+		case TS_MMI_DO_POWER_ON:
+			ts_mmi_queued_power_on(touch_cdev);
+			break;
+
 		case TS_MMI_DO_RESUME:
 			ret = atomic_read(&touch_cdev->resume_should_stop);
 			if (ret) {
@@ -353,6 +396,14 @@ static void ts_mmi_worker_func(struct work_struct *w)
 			ts_mmi_queued_resume(touch_cdev);
 				break;
 
+		case TS_MMI_DO_SLEEP:
+			ts_mmi_queued_stop(touch_cdev);
+			break;
+
+		case TS_MMI_DO_POWER_OFF:
+			ts_mmi_queued_power_off(touch_cdev);
+			break;
+
 		case TS_MMI_DO_PS:
 			TRY_TO_CALL(charger_mode, (int)touch_cdev->ps_is_present);
 				break;
diff --git a/include/linux/touchscreen_mmi.h b/include/linux/touchscreen_mmi.h
index f245ab492141..8c6424f1b762 100644
--- a/include/linux/touchscreen_mmi.h
+++ b/include/linux/touchscreen_mmi.h
@@ -306,7 +306,10 @@ enum ts_mmi_panel_event {
 };
 
 enum ts_mmi_work {
+	TS_MMI_DO_POWER_ON,
 	TS_MMI_DO_RESUME,
+	TS_MMI_DO_SLEEP,
+	TS_MMI_DO_POWER_OFF,
 	TS_MMI_DO_PS,
 	TS_MMI_DO_REFRESH_RATE,
 	TS_MMI_DO_FPS,
-- 
2.39.2

